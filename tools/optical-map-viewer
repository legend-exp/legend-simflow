//usr/bin/env root -l ${0}\(\""$*"\"\); exit $?
/* optical_map_viewer
 *
 * Author: Luigi Pertoldi - pertoldi@pd.infn.it
 * Created: Sun 24 Mar 2019
 */

#include "getopt.h"

TH3* LAr_prob_map;

const std::string OpenFileDialog();
void dynamic_exec();
void do_visualize(int rebin, bool array_closeup);

void usage() {
    std::cerr << "\n"
              << "USAGE: optical_map_viewer [options] [ROOTfile:objname]\n"
              << "\n"
              << "options:\n"
              << "  --help|-h        : print this help message and exit\n"
              << "  --rebin|-r <val> : set rebin factor\n"
              << "  --array|-a       : zoom into the array region\n"
              << "\n";
}

void optical_map_viewer(std::string args = "") {

    // gStyle->SetCanvasPreferGL(true);

    // default font
    int font = 43;
    int fontsize = 24;

    // FIXME: I don't know how to set the hist title font size in pixels
    // an the following does not work
    // gStyle->SetTextFont(font);
    // gStyle->SetTextSize(fontsize);

    // pad title
    gStyle->SetTitleFont(font);
    gStyle->SetTitleSize(fontsize);

    // axis titles
    gStyle->SetTitleFont(font, "XYZ");
    gStyle->SetTitleSize(fontsize, "XYZ");

    // axis labels
    gStyle->SetLabelFont(font, "XYZ");
    gStyle->SetLabelSize(fontsize, "XYZ");

    gROOT->ForceStyle();

    if (gROOT->GetVersionInt() < 60900) {
        std::cerr << "ERROR: this program works properly with ROOT >= 6.09\n";
        gSystem->Exit(1);
    }

    args = "optical_map_viewer " + args;

    int argc = 0;
    char** argv = new char*[50];

    std::istringstream iss(args);
    std::string word;
    while (iss >> word) {
        char* tmp = new char[50];
        strcpy(tmp, word.c_str());
        argv[argc] = tmp;
        argc++;
    }

    const char* const short_opts = "r:ha";
    const option long_opts[] = {
        { "rebin",  required_argument, nullptr, 'r' },
        { "help",   no_argument,       nullptr, 'h' },
        { "array",  no_argument,       nullptr, 'a' },
        { nullptr,  no_argument,       nullptr, 0   }
    };

    // defaults
    int rebin = 1;
    bool array_closeup = false;

    int opt = 0;
    while ((opt = getopt_long(argc, argv, short_opts, long_opts, nullptr)) != -1) {
        switch (opt) {
            case 'r':
                rebin = strtol(optarg, (char **)NULL, 10);
                break;
            case 'a':
                array_closeup = true;
                break;
            case 'h': // -h or --help
            case '?': // Unrecognized option
            default:
                usage();
                gSystem->Exit(1);
        }
    }

    // extra arguments
    std::vector<std::string> extra_args;
    for(; optind < argc; optind++){
        extra_args.emplace_back(argv[optind]);
    }

    std::string filename = "";
    std::string objname = "LAr_prob_map";

    if (!extra_args.empty()) {
        if (extra_args[0].find(':') == std::string::npos) {
            filename = extra_args[0];
        }
        else {
            filename = extra_args[0].substr(0, extra_args[0].find(':'));
            objname = extra_args[0].substr(extra_args[0].find(':')+1, extra_args[0].size());
        }
    }
    else {
        // ask for input file
        filename = OpenFileDialog();
        if (filename.empty()) { gSystem->Exit(0); }
    }

    TFile* tfile = new TFile(filename.c_str(), "read");
    if (!tfile->IsOpen()) { gSystem->Exit(1); };

    LAr_prob_map = dynamic_cast<TH3*>(tfile->Get(objname.c_str()));
    if (!LAr_prob_map) {
        std::cout << "ERROR: " << objname << " object not found!\n"
                  << "File content:\n";
        tfile->ls();
        while (!LAr_prob_map) {
            std::string name;
            std::cout << "select another TH3 object: ";
            std::cin >> name;
            LAr_prob_map = dynamic_cast<TH3*>(tfile->Get(name.c_str()));
        }
    }

    do_visualize(rebin, array_closeup);
}

void do_visualize(int rebin, bool array_closeup) {

    std::cout << "INFO: preparing histogram..." << std::endl;
    // this is needed for a meaningful rebin...
    float max_prob = 0;
    float min_prob = 1;
    for (int i = 0; i < LAr_prob_map->GetNcells(); ++i) {
        auto _p = LAr_prob_map->GetBinContent(i);
        if (_p < 0) LAr_prob_map->SetBinContent(i, 0);
        if (_p > max_prob) max_prob = _p;
        if (_p > 0 and _p < min_prob) min_prob = _p;
    }

    // eventually rebin
    LAr_prob_map->Rebin3D(rebin, rebin, rebin);
    LAr_prob_map->Scale(1./(rebin*rebin*rebin));

    LAr_prob_map->SetTitle("LAr photon detection probability map;x (cm);y (cm);z (cm)");
    LAr_prob_map->SetLineColor(kBlack);
    LAr_prob_map->SetStats(false);
    LAr_prob_map->SetMinimum(min_prob);
    LAr_prob_map->SetMaximum(max_prob);

    std::cout << "INFO: preparing 3D cut view" << std::endl;
    auto LAr_prob_map_draw = dynamic_cast<TH3*>(LAr_prob_map->Clone("larmap_clone_to_draw"));
    LAr_prob_map_draw->SetFillColor(kAzure-9);

    for (int j = 1; j <= LAr_prob_map_draw->GetNbinsY(); ++j) {
        if (LAr_prob_map_draw->GetYaxis()->GetBinCenter(j) < 0) {
            for (int i = 1; i <= LAr_prob_map_draw->GetNbinsX(); ++i) {
                for (int k = 1; k <= LAr_prob_map_draw->GetNbinsZ(); ++k) {
                    LAr_prob_map_draw->SetBinContent(i, j, k, 0);
                }
            }
        }
    }

    auto canvas = new TCanvas(
        "optical_map_viewer", "Optical Map Viewer",
        1920, 1080
    );
    canvas->ToggleEventStatus();

    // this should enable the "invert" drawing mode
    // if a shape is re-drawn then it should disappear
    canvas->FeedbackMode(true);

    auto main_pad = new TPad(
        "main_pad", "Main Pad",
        0.0, 0.0, 0.25, 1.0
    );
    main_pad->SetMargin(0, 0, 0, 0);
    main_pad->SetPhi(30);
    main_pad->SetTheta(10);

    auto xz_pad = new TPad(
        "xz_pad", "XZ Projection Pad",
        0.25, 0.0, 0.5, 1.0
    );
    xz_pad->SetLogz();
    xz_pad->SetGrid();
    xz_pad->SetTicks(1,1);
    xz_pad->SetTopMargin(0.07);
    xz_pad->SetRightMargin(0.12);

    auto xy_pad = new TPad(
        "xy_pad", "XY Projection Pad",
        0.5, 0.0, 1.0, 1.0
    );
    xy_pad->SetLogz();
    xy_pad->SetGrid();
    xy_pad->SetTicks(1,1);
    xy_pad->SetTopMargin(0.07);
    xy_pad->SetRightMargin(0.12);

    main_pad->Draw();
    xz_pad->Draw();
    xy_pad->Draw();

    gStyle->SetPalette(kDarkBodyRadiator);

    main_pad->cd();

    std::cout << "INFO: displaying, this could take a while..." << std::endl;
    LAr_prob_map_draw->Draw("a fb bb lego");
    // LAr_prob_map_draw->Draw("a fb bb iso");

    // pre-draw something
    auto hp_xz = dynamic_cast<TH2*>(LAr_prob_map->Project3D("zx"));
    hp_xz->Reset();
    hp_xz->SetTickLength(0.01, "X");
    hp_xz->SetTickLength(0.02, "Y");
    hp_xz->SetTitleOffset(1.30, "Y");
    hp_xz->SetZTitle("");
    hp_xz->SetStats(false);
    hp_xz->SetMinimum(min_prob);
    hp_xz->SetMaximum(max_prob);
    hp_xz->GetZaxis()->SetRangeUser(min_prob, max_prob);
    hp_xz->SetTitle("XZ slice");
    xz_pad->cd();
    hp_xz->Draw("colz");

    auto hp_xy = dynamic_cast<TH2*>(LAr_prob_map->Project3D("yx"));
    hp_xy->Reset();
    hp_xy->SetTickLength(0.01, "X");
    hp_xy->SetTickLength(0.02, "Y");
    hp_xy->SetTitleOffset(1.30, "Y");
    hp_xy->SetZTitle("");
    hp_xy->SetStats(false);
    hp_xy->SetMinimum(min_prob);
    hp_xy->SetMaximum(max_prob);
    hp_xy->GetZaxis()->SetRangeUser(min_prob, max_prob);
    hp_xy->SetTitle("XY slice");
    xy_pad->cd();
    hp_xy->Draw("colz");

    // attach dynamic behaviour
    main_pad->AddExec("dynamic", Form("dynamic_exec(%d, %f, %f)", array_closeup, min_prob, max_prob));

    return;
}

TBox *line_xz, *line_xy;

void dynamic_exec(bool array_closeup, float min_prob, float max_prob) {

    auto nbins = 1;

    // check if mouse pointer is in the correct region
    auto *select = gPad->GetSelected();
    if (!select or !select->InheritsFrom(TH3::Class())) return;
    auto h = LAr_prob_map;

    // mouse pointer position
    int px = gPad->GetEventX();
    int py = gPad->GetEventY();

    auto view = gPad->GetView();
    if (!view) return;

    double u_xz[3], xx_xz[3];
    double u_xy[3], xx_xy[3];

    static TPoint rect1_xz[5]; // store vertices of the polyline (rectangle), initialised 0 by default
    static TPoint rect1_xy[5];

    double uxmin = gPad->GetUxmin();
    double uxmax = gPad->GetUxmax();
    double uymin = gPad->GetUymin();
    double uymax = gPad->GetUymax();

    int pxmin = gPad->XtoAbsPixel(uxmin);
    int pxmax = gPad->XtoAbsPixel(uxmax);
    if (pxmin == pxmax) return;
    int pymin = gPad->YtoAbsPixel(uymin);
    int pymax = gPad->YtoAbsPixel(uymax);
    if (pymin == pymax) return;
    Double_t cx = (pxmax-pxmin)/(uxmax-uxmin);
    Double_t cy = (pymax-pymin)/(uymax-uymin);

    auto main_pad = gPad;
    auto canvas = dynamic_cast<TCanvas*>(gPad->GetCanvas());

    auto xaxis = h->GetXaxis();
    auto yaxis = h->GetYaxis();
    auto zaxis = h->GetZaxis();

    /////////////////
    // xz polyline //
    /////////////////

    auto c_xz = dynamic_cast<TPad*>(canvas->GetListOfPrimitives()->FindObject("xz_pad"));
    if (!c_xz) return;

    // erase old polyline
    // if (rect1_xz[0].GetX()) gVirtualX->DrawPolyLine(5, rect1_xz);

    // compute polyline
    int first_xz = yaxis->GetFirst();
    int last_xz  = yaxis->GetLast();
    int biny_xz = first_xz + int((last_xz-first_xz)*(px-pxmin)/(pxmax-pxmin));
    int biny2_xz = TMath::Min(biny_xz+nbins-1, yaxis->GetNbins());
    yaxis->SetRange(biny_xz, biny2_xz);
    xx_xz[0] = xaxis->GetXmin();
    xx_xz[2] = zaxis->GetXmax();
    xx_xz[1] = yaxis->GetBinCenter(biny_xz);
    view->WCtoNDC(xx_xz, u_xz);
    rect1_xz[0].SetX(pxmin + int((u_xz[0]-uxmin)*cx));
    rect1_xz[0].SetY(pymin + int((u_xz[1]-uymin)*cy));
    rect1_xz[4].SetX(rect1_xz[0].GetX());
    rect1_xz[4].SetY(rect1_xz[0].GetY());
    xx_xz[0] = xaxis->GetXmax();
    view->WCtoNDC(xx_xz, u_xz);
    rect1_xz[1].SetX(pxmin + int((u_xz[0]-uxmin)*cx));
    rect1_xz[1].SetY(pymin + int((u_xz[1]-uymin)*cy));
    xx_xz[2] = zaxis->GetXmin();
    view->WCtoNDC(xx_xz, u_xz);
    rect1_xz[2].SetX(pxmin + int((u_xz[0]-uxmin)*cx));
    rect1_xz[2].SetY(pymin + int((u_xz[1]-uymin)*cy));
    xx_xz[0] = xaxis->GetXmin();
    view->WCtoNDC(xx_xz, u_xz);
    rect1_xz[3].SetX(pxmin + int((u_xz[0]-uxmin)*cx));
    rect1_xz[3].SetY(pymin + int((u_xz[1]-uymin)*cy));

    ///////////////////
    // xy projection //
    ///////////////////

    auto c_xy = dynamic_cast<TPad*>(canvas->GetListOfPrimitives()->FindObject("xy_pad"));
    if (!c_xy) return;

    // erase old polyline
    // if (rect1_xy[0].GetX()) gVirtualX->DrawPolyLine(5, rect1_xy);

    // compute polyline
    int first_xy = zaxis->GetFirst();
    int last_xy  = zaxis->GetLast();
    int binz_xy  = first_xy + int((last_xy-first_xy)*(py-pymin)/(pymax-pymin));
    int binz2_xy = TMath::Min(binz_xy+nbins-1, zaxis->GetNbins());
    zaxis->SetRange(binz_xy, binz2_xy);
    xx_xy[0] = xaxis->GetXmin();
    xx_xy[1] = yaxis->GetXmax();
    xx_xy[2] = zaxis->GetBinCenter(binz_xy);
    view->WCtoNDC(xx_xy, u_xy);
    rect1_xy[0].SetX(pxmin + int((u_xy[0]-uxmin)*cx));
    rect1_xy[0].SetY(pymin + int((u_xy[1]-uymin)*cy));
    rect1_xy[4].SetX(rect1_xy[0].GetX());
    rect1_xy[4].SetY(rect1_xy[0].GetY());
    xx_xy[0] = xaxis->GetXmax();
    view->WCtoNDC(xx_xy, u_xy);
    rect1_xy[1].SetX(pxmin + int((u_xy[0]-uxmin)*cx));
    rect1_xy[1].SetY(pymin + int((u_xy[1]-uymin)*cy));
    xx_xy[1] = yaxis->GetXmin();
    view->WCtoNDC(xx_xy, u_xy);
    rect1_xy[2].SetX(pxmin + int((u_xy[0]-uxmin)*cx));
    rect1_xy[2].SetY(pymin + int((u_xy[1]-uymin)*cy));
    xx_xy[0] = xaxis->GetXmin();
    view->WCtoNDC(xx_xy, u_xy);
    rect1_xy[3].SetX(pxmin + int((u_xy[0]-uxmin)*cx));
    rect1_xy[3].SetY(pymin + int((u_xy[1]-uymin)*cy));

    c_xz->Clear();
    c_xz->cd();

    // restore axis props
    zaxis->UnZoom();
    yaxis->SetRange(biny_xz, biny2_xz);

    // delete old projection
    auto hp_xz_old = dynamic_cast<TH2*>(canvas->GetListOfPrimitives()->FindObject("LAr_prob_map_zx"));
    if (hp_xz_old) delete hp_xz_old;

    // do the new projection
    auto hp_xz = dynamic_cast<TH2*>(h->Project3D("zx"));

    yaxis->SetRange(first_xz, last_xz);

    if (hp_xz) {
        hp_xz->SetTitle(
            TString::Format("XZ slice - bin %d, y #in [%.1f, %.f]",
                biny_xz, yaxis->GetBinLowEdge(biny_xz), yaxis->GetBinUpEdge(biny_xz))
        );
        hp_xz->SetTickLength(0.01, "X");
        hp_xz->SetTickLength(0.02, "Y");
        hp_xz->SetTitleOffset(1.30, "Y");
        hp_xz->SetZTitle("");
        hp_xz->SetStats(false);
        hp_xz->SetMinimum(min_prob);
        hp_xz->SetMaximum(max_prob);
        hp_xz->GetZaxis()->SetRangeUser(min_prob, max_prob);
        hp_xz->Draw("colz");
    }

    // red line for projection
    if (!line_xz) {
        line_xz = new TBox;
        line_xz->SetFillColor(kRed);
        line_xz->SetLineWidth(0);
        line_xz->Draw();
    }
    line_xz->SetX1(hp_xz->GetXaxis()->GetXmin());
    line_xz->SetY1(hp_xz->GetYaxis()->GetBinLowEdge(binz_xy));
    line_xz->SetX2(hp_xz->GetXaxis()->GetXmax());
    line_xz->SetY2(hp_xz->GetYaxis()->GetBinLowEdge(binz2_xy)
            + hp_xz->GetYaxis()->GetBinWidth(binz2_xy));
    line_xz->Draw();

    c_xy->Clear();
    c_xy->cd();

    yaxis->UnZoom();
    zaxis->SetRange(binz_xy, binz2_xy);

    // delete old projection
    auto hp_xy_old = dynamic_cast<TH2*>(canvas->GetListOfPrimitives()->FindObject("LAr_prob_map_xy"));
    if (hp_xy_old) delete hp_xy_old;

    // do the new projection
    auto hp_xy = dynamic_cast<TH2*>(h->Project3D("yx"));

    zaxis->SetRange(first_xy, last_xy);

    if (hp_xy) {
        hp_xy->SetTitle(
            TString::Format("XY slice - bin %d, z #in [%.1f, %.f]",
                binz_xy, zaxis->GetBinLowEdge(binz_xy), zaxis->GetBinUpEdge(binz_xy))
        );
        hp_xy->SetTickLength(0.01, "X");
        hp_xy->SetTickLength(0.02, "Y");
        hp_xy->SetTitleOffset(1.30, "Y");
        hp_xy->SetZTitle("");
        hp_xy->SetStats(false);
        hp_xy->SetMinimum(min_prob);
        hp_xy->SetMaximum(max_prob);
        hp_xy->GetZaxis()->SetRangeUser(min_prob, max_prob);
        hp_xy->Draw("colz");
    }

    // red line for projection
    if (!line_xy) {
        line_xy = new TBox;
        line_xy->SetFillColor(kRed);
        line_xy->SetLineWidth(0);
        line_xy->Draw();
    }
    line_xy->SetX1(hp_xy->GetXaxis()->GetBinLowEdge(biny_xz));
    line_xy->SetY1(hp_xy->GetYaxis()->GetXmin());
    line_xy->SetX2(hp_xy->GetXaxis()->GetBinLowEdge(biny2_xz)
            + hp_xy->GetXaxis()->GetBinWidth(binz2_xy));
    line_xy->SetY2(hp_xy->GetYaxis()->GetXmax());
    line_xy->Draw();

    if (array_closeup) {
        hp_xz->GetXaxis()->SetRangeUser(-15, 15);
        hp_xz->GetYaxis()->SetRangeUser(-35, 15);
        hp_xy->GetXaxis()->SetRangeUser(-15, 15);
        hp_xy->GetYaxis()->SetRangeUser(-17, 17);
    }
    c_xy->Update();
    c_xz->Update();

    main_pad->cd();

    // draw the polylines
    // gVirtualX->DrawPolyLine(5, rect1_xy);
    // gVirtualX->DrawPolyLine(5, rect1_xz);
}

const std::string OpenFileDialog() {
   // Prompt for file to be opened. Depending on navigation in
   // dialog the current working directory can be changed.
   // The returned file name is always with respect to the
   // current directory.

   const char *gOpenAsTypes[] = {
      "ROOT files",   "*.root",
      "All files",    "*",
       0,              0
   };

   static TGFileInfo fi;
   fi.fFileTypes = gOpenAsTypes;
   new TGFileDialog(gClient->GetRoot(), gClient->GetRoot(), kFDOpen, &fi);

   if (fi.fFilename) return std::string(fi.fFilename);
   else return "";
}

// vim: filetype=cpp
